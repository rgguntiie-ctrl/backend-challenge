definitions:
  domain.Login:
    properties:
      email:
        type: string
    type: object
  domain.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
info:
  contact: {}
paths:
  /login:
    post:
      consumes:
      - application/json
      parameters:
      - description: Login info
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/domain.Login'
      produces:
      - application/json
      responses: {}
      summary: Login and get JWT
      tags:
      - Auth
  /register:
    post:
      consumes:
      - application/json
      parameters:
      - description: User info
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/domain.User'
      produces:
      - application/json
      responses: {}
      summary: Register new user
      tags:
      - Auth
  /users:
    get:
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: List users (paginated)
      tags:
      - User
    post:
      consumes:
      - application/json
      parameters:
      - description: User info
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/domain.User'
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Create user (admin)
      tags:
      - User
  /users/{id}:
    delete:
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Delete user
      tags:
      - User
    get:
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Get user by ID
      tags:
      - User
    put:
      consumes:
      - application/json
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User info
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/domain.User'
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Update user's name or email
      tags:
      - User
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
